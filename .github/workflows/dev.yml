name: Go

on:
  push:
    branches: [ dev ]

jobs:
  delete-artifacts:
    runs-on: ubuntu-latest
    steps:
      - uses: kolpav/purge-artifacts-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          expire-in: 1days # Setting this to 0 will delete all artifacts

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:

    - name: Set up Go 1.x
      uses: actions/setup-go@v2
      with:
        go-version: ^1.16

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2
      with:
        fetch-depth: "0"

    - run: |
        git fetch --depth=1 origin +refs/tags/*:refs/tags/*

    - run: git pull

    - name: Build
      run: make dev

    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v2
      with:
        # Artifact name
        name: httpgo_dev
        # A file, directory or wildcard pattern that describes what to upload
        path: httpgo_dev

    - name: Upload a cfg Artifact
      uses: actions/upload-artifact@v2
      with:
        # Artifact name
        name: cfg
        # A file, directory or wildcard pattern that describes what to upload
        path: cfg/

  #  name: Generate systemd unit file for go services
  #  runs-on: ubuntu-latest
  #  steps:
    - shell: bash
      env:
        PROD_PGDATABASE_DEV: ${{secrets.PGDATABASE_DEV }}
        PROD_PGUSER: ${{secrets.PGUSER }}
        PROD_PGPASSWORD: ${{secrets.PGPASS }}
        TBTOKEN: ${{secrets.TBTOKEN }}
        TBCHATID: ${{secrets.TBCHATID }}
      run: |
        for sd_unit in systemd/dev/*.service; do

          sed -i "s|PGHOST=|PGHOST=localhost|g" $sd_unit
          sed -i "s|PGDATABASE_DEV=|PGDATABASE=$PROD_PGDATABASE_DEV|g" $sd_unit
          sed -i "s|PGUSER=|PGUSER=$PROD_PGUSER|g" $sd_unit
          sed -i "s|PGPASSWORD=|PGPASSWORD=$PROD_PGPASSWORD|g" $sd_unit
          sed -i "s|TBTOKEN=|TBTOKEN=$TBTOKEN|g" $sd_unit
          sed -i "s|TBCHATID=|TBCHATID=$TBCHATID|g" $sd_unit

          cat  $sd_unit
        done

    - name: Upload a systemd Artifact
      uses: actions/upload-artifact@v2
      with:
        # Artifact name
        name: systemd
        # A file, directory or wildcard pattern that describes what to upload
        path: systemd/dev

    - name: Copy cfg of DB via scp
      uses: appleboy/scp-action@master
      env:
        HOST: ${{ secrets.SSH_PROD_HOST }}
        USERNAME: ${{ secrets.SSH_PROD_USER }}
        #PORT: 22
        KEY: ${{ secrets.SSH_KEY }}
      with:
        rm: true
        source: "cfg/DB/*"
        target: "/opt/uppeople/cfg/dev/DB"
        strip_components: 2

    - name: Copy httpgo_dev via scp
      uses: appleboy/scp-action@master
      env:
        HOST: ${{ secrets.SSH_PROD_HOST }}
        USERNAME: ${{ secrets.SSH_PROD_USER }}
        PORT: 22
        KEY: ${{ secrets.SSH_KEY }}
      with:
        source: "httpgo_dev"
        target: "/opt/uppeople/"

    - name: Copy systemd _dev files via scp
      uses: appleboy/scp-action@master
      env:
        HOST: ${{ secrets.SSH_PROD_HOST }}
        USERNAME: ${{ secrets.SSH_PROD_USER }}
        PORT: 22
        KEY: ${{ secrets.SSH_KEY }}
      with:
        source: "systemd/dev/*.service"
        target: "/opt/uppeople/"

    - name: stop services on pm-db.net
      uses: appleboy/ssh-action@master
      env:
        USERNAME: ${{secrets.SSH_PROD_USER }}
        HOST:     ${{secrets.SSH_PROD_HOST }}
        KEY:      ${{ secrets.SSH_KEY }}
        SCRIPT:   |
          # Next lines it's workaround for the error scp: ... Text file busy
          # And we need stop service before replacing golang binaries

          for sd_unit in /opt/uppeople/systemd/dev/*.service; do

            sudo systemctl stop $(basename "$sd_unit")
            sudo cp $sd_unit /etc/systemd/system/
          done

    - name: Restart services
      uses: appleboy/ssh-action@master
      env:
        USERNAME: ${{secrets.SSH_PROD_USER }}
        HOST:     ${{secrets.SSH_PROD_HOST }}
        KEY:      ${{ secrets.SSH_KEY }}
        SCRIPT: |
          sudo systemctl daemon-reload
          for sd_unit in /opt/uppeople/systemd/dev/*.service; do
            #sd_unit = $(echo "$sd_unit" | cut -f 1 -d '.')

            sudo systemctl enable $(basename "$sd_unit")
            sudo systemctl restart $(basename "$sd_unit")
            sudo systemctl status $(basename "$sd_unit") -l

          done
